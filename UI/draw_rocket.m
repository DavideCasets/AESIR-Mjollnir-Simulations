function draw_rocket(ax, rocket, scaler)
ColorMap = evalin("base", "ColorMap");


try 
mesh = evalin("base", filename2varname(rocket.mesh));
catch
mesh = read_mesh(rocket);
assignin("base", filename2varname(rocket.mesh), mesh);
end


if exist("scaler", "var") == false
scaler = 0.1;
end

initial_plotstate = ax.NextPlot;

plot3(ax,0,0,0);
ax.NextPlot = "add";
draw_internal(rocket);


xlim(ax, rocket.position(1,:) + [-3 3])
ylim(ax, rocket.position(2,:) + [-3 3])
zlim(ax, rocket.position(3,:) + [-4 4])
ax.DataAspectRatio = [1 1 1];
ax.XGrid = "on";
ax.YGrid = "on";
ax.ZGrid = "on";
ax.GridAlpha = 0;
ax.NextPlot = initial_plotstate;



function draw_internal(rocket)


new_mesh = mesh;
new_mesh.vertices = mesh.vertices*(rocket.attitude');
new_mesh.vertices = new_mesh.vertices + rocket.position';

patch(ax, new_mesh, 'FaceColor',       ColorMap(70,:), ...
                    'EdgeColor',       'none',        ...
                    'FaceLighting',    'gouraud',     ...
                    'AmbientStrength', 0.6, ...
                    'FaceAlpha',       0.7);
%l = light(ax, "Style","local","rocket.position", rocket.position' + [1 0 0]);
l = light(ax);
l.Color = [1 1 1];
lighting(ax, "flat")
axis(ax, "tight")




%% Center of mass
scatter3(ax, rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass, ...
             rocket.position(2,:) + rocket.attitude(2,:)*rocket.center_of_mass, ...
             rocket.position(3,:) + rocket.attitude(3,:)*rocket.center_of_mass, ...
             rocket.mass *1e-3, "filled");


% %% rocket.moments.(moment) of inertia
% 
% z_circle = rocket.position +  ...
%                            rocket.attitude*(rocket.center_of_mass + ...
%                                                                 [(rocket.rocket.moments.(moment)_of_inertia(3,3).^(0.2))*cos(linspace(0,2*pi,100)) *1e-3; ...
%                                                                  (rocket.rocket.moments.(moment)_of_inertia(3,3).^(0.2))*sin(linspace(0,2*pi,100)) *1e-3; ...
%                                                                  zeros(1,100)]*300);
% y_circle =rocket.position +  ...
%                            rocket.attitude*(rocket.center_of_mass + ...
%                                                                 [(rocket.rocket.moments.(moment)_of_inertia(2,2).^(0.2))*cos(linspace(0,2*pi,100)) *1e-3; ...
%                                                                  zeros(1,100); ...
%                                                                  (rocket.rocket.moments.(moment)_of_inertia(2,2).^(0.2))*sin(linspace(0,2*pi,100)) *1e-3]*300);
% x_circle = rocket.position +  ...
%                            rocket.attitude*(rocket.center_of_mass + ...
%                                                                 [zeros(1,100); ...
%                                                                  (rocket.rocket.moments.(moment)_of_inertia(1,1).^(0.2))*cos(linspace(0,2*pi,100)) *1e-3; ...
%                                                                  (rocket.rocket.moments.(moment)_of_inertia(1,1).^(0.2))*sin(linspace(0,2*pi,100)) *1e-3]*300);
% 
% 
% 
% plot3(ax, x_circle(1,:), x_circle(2,:), x_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));
% plot3(ax, y_circle(1,:), y_circle(2,:), y_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));
% plot3(ax, z_circle(1,:), z_circle(2,:), z_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));






% quiver3(ax, rocket.position(1,:)*[1 1 1], ...
%             rocket.position(2,:)*[1 1 1], ...
%             rocket.position(3,:)*[1 1 1], ...
%             rocket.attitude(1,:) *1e-3, ...
%             rocket.attitude(2,:) *1e-3, ...
%             rocket.attitude(3,:) *1e-3, ...
%             "Color",ColorMap(end-100,:))

% quiver3(ax, rocket.position(1,:), ...
%             rocket.position(2,:), ...
%             rocket.position(3,:), ...
%             rocket.velocity(1,:) *1e-3, ...
%             rocket.velocity(2,:) *1e-3, ...
%             rocket.velocity(3,:) *1e-3, ...
%             "Color",ColorMap(60,:))

%% rocket.forces.(force)s:
% cellfun(@(rocket.forces.(force)) quiver3(ax, ...
%                          rocket.position(1,:) +  rocket.attitude(1,:)*rocket.forces.(force).pos, ...
%                          rocket.position(2,:) +  rocket.attitude(2,:)*rocket.forces.(force).pos, ...
%                          rocket.position(3,:) +  rocket.attitude(3,:)*rocket.forces.(force).pos, ...
%                          rocket.forces.(force).vec(1,:) *1e-3, ...
%                          rocket.forces.(force).vec(2,:) *1e-3, ...
%                          rocket.forces.(force).vec(3,:) *1e-3, ...
%                          "Color", ColorMap(end,:), ...
%                          "LineWidth",1),...
%         values(rocket.rocket.forces.(force)s , "cell"))


cellfun(@(force) quiver3(ax, ...
                         rocket.position(1,:) +  rocket.attitude(1,:)*rocket.forces.(force).pos - rocket.forces.(force).vec(1,:) *1e-3, ...
                         rocket.position(2,:) +  rocket.attitude(2,:)*rocket.forces.(force).pos - rocket.forces.(force).vec(2,:) *1e-3, ...
                         rocket.position(3,:) +  rocket.attitude(3,:)*rocket.forces.(force).pos - rocket.forces.(force).vec(3,:) *1e-3, ...
                         rocket.forces.(force).vec(1,:) *1e-3, ...
                         rocket.forces.(force).vec(2,:) *1e-3, ...
                         rocket.forces.(force).vec(3,:) *1e-3, ...
                         "Color", ColorMap(200,:), ...
                         "LineWidth",1.5),...
        fieldnames(rocket.forces))

cellfun(@(force) text(ax, ...
                         rocket.position(1,:) + rocket.attitude(1,:)*rocket.forces.(force).pos -rocket.forces.(force).vec(1,:) *1e-3*0.2 + 0.3, ...
                         rocket.position(2,:) + rocket.attitude(2,:)*rocket.forces.(force).pos -rocket.forces.(force).vec(2,:) *1e-3*0.2 + 0.3, ...
                         rocket.position(3,:) + rocket.attitude(3,:)*rocket.forces.(force).pos -rocket.forces.(force).vec(3,:) *1e-3*0.2 + 0.3, ...
                         force +": "+ string(norm(rocket.forces.(force).vec)/1000)+" kN", ...
                         "Color", ColorMap(200,:), ...
                         "LineWidth", 2),...
        fieldnames(rocket.forces))


%% rocket.moments.(moment)s:
% cellfun(@(rocket.moments.(moment)) quiver3(ax, ...
%                          rocket.position(1,:) + rocket.attitude(1,:)*rocket.moments.(moment).pos, ...
%                          rocket.position(2,:) + rocket.attitude(2,:)*rocket.moments.(moment).pos, ...
%                          rocket.position(3,:) + rocket.attitude(3,:)*rocket.moments.(moment).pos, ...
%                          rocket.moments.(moment).vec(1,:) *1e-3*300, ...
%                          rocket.moments.(moment).vec(2,:) *1e-3*300, ...
%                          rocket.moments.(moment).vec(3,:) *1e-3*300, ...
%                          "Color", ColorMap(60,:)),...
%          values(rocket.rocket.moments.(moment)s , "cell"))

cellfun(@(moment) quiver3(ax, ...
                         rocket.position(1,:) + rocket.attitude(1,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(1,:) *1e-3*10, ...
                         rocket.position(2,:) + rocket.attitude(2,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(2,:) *1e-3*10, ...
                         rocket.position(3,:) + rocket.attitude(3,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(3,:) *1e-3*10, ...
                         rocket.moments.(moment).vec(1,:) *1e-3*10, ...
                         rocket.moments.(moment).vec(2,:) *1e-3*10, ...
                         rocket.moments.(moment).vec(3,:) *1e-3*10, ...
                         "Color", ColorMap(150,:), ...
                         "LineWidth", 2),...
         fieldnames(rocket.moments))

cellfun(@(moment) text(ax, ...
                         rocket.position(1,:) + rocket.attitude(1,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(1,:) *1e-3*4 + 0.3, ...
                         rocket.position(2,:) + rocket.attitude(2,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(2,:) *1e-3*4 + 0.3, ...
                         rocket.position(3,:) + rocket.attitude(3,:)*rocket.moments.(moment).pos - rocket.moments.(moment).vec(3,:) *1e-3*4 + 0.3, ...
                         moment +": "+ string(norm(rocket.moments.(moment).vec))+" Nm", ...
                         "Color", ColorMap(150,:), ...
                         "LineStyle","--"),...
        fieldnames(rocket.moments))





%% Relative wind:
xvec = linspace(-2,2,2) + rocket.position(1,:);
yvec = linspace(-2,2,2) + rocket.position(2,:);
zvec = linspace(-2,2,2) + rocket.position(3,:);
[X,Y,Z] = meshgrid(xvec, yvec, zvec);

quiver3(ax, X,Y,Z, rocket.aerodynamics.relative_velocity(1,:)*ones(size(X)), ...
                   rocket.aerodynamics.relative_velocity(2,:)*ones(size(Y)), ...
                   rocket.aerodynamics.relative_velocity(3,:)*ones(size(Z)), "AutoScale","on","LineWidth", 0.2, "Color",ColorMap(80,:))


if isfield(rocket, "guidance")
quiver3(ax, rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass, ...
            rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass, ...
            rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass, ...
            rocket.guidance.desired_direction(1,:)*10,...
            rocket.guidance.desired_direction(2,:)*10,...
            rocket.guidance.desired_direction(3,:)*10, "LineWidth", 2);
text   (ax, rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass + rocket.guidance.desired_direction(1,:)*5, ...
            rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass + rocket.guidance.desired_direction(2,:)*5, ...
            rocket.position(1,:) + rocket.attitude(1,:)*rocket.center_of_mass + rocket.guidance.desired_direction(3,:)*5, "desired direction");

end

    end
end