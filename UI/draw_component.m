function draw_component(ax,comp, scaler)
ColorMap = evalin("base", "ColorMap");

if exist("scaler", "var") == false
scaler = 0.1;
end

initial_plotstate = ax.NextPlot;

plot3(ax,0,0,0);
ax.NextPlot = "add";
draw_internal(comp);
if isfield(comp, "children")
cellfun(@draw_internal, comp.children )
end

xlim(ax, comp.position(1) + [-3 3])
ylim(ax, comp.position(2) + [-3 3])
zlim(ax, comp.position(3) + [-4 4])
ax.DataAspectRatio = [1 1 1];
ax.XGrid = "on";
ax.YGrid = "on";
ax.ZGrid = "on";
ax.GridAlpha = 0;
ax.NextPlot = initial_plotstate;



function draw_internal(comp)

%% Mesh:
if isfield(comp, "mesh")
new_mesh = comp.mesh;
new_mesh.vertices = comp.mesh.vertices*(comp.attitude');
new_mesh.vertices = new_mesh.vertices + comp.position';

patch(ax, new_mesh, 'FaceColor',       ColorMap(70,:), ...
                    'EdgeColor',       'none',        ...
                    'FaceLighting',    'gouraud',     ...
                    'AmbientStrength', 0.1, ...
                    'FaceAlpha',       0.7);
%l = light(ax, "Style","local","Position", comp.position' + [1 0 0]);
l = light(ax);
l.Color = [1 1 1];
lighting(ax, "flat")
axis(ax, "tight")

end


%% Center of mass
scatter3(ax, comp.position(1) + comp.attitude(1,:)*comp.center_of_mass, ...
             comp.position(2) + comp.attitude(2,:)*comp.center_of_mass, ...
             comp.position(3) + comp.attitude(3,:)*comp.center_of_mass, ...
             comp.mass*scaler, "filled");


% %% comp.moments.(moment) of inertia
% 
% z_circle = comp.position +  ...
%                            comp.attitude*(comp.center_of_mass + ...
%                                                                 [(comp.comp.moments.(moment)_of_inertia(3,3).^(0.2))*cos(linspace(0,2*pi,100))*scaler; ...
%                                                                  (comp.comp.moments.(moment)_of_inertia(3,3).^(0.2))*sin(linspace(0,2*pi,100))*scaler; ...
%                                                                  zeros(1,100)]*300);
% y_circle =comp.position +  ...
%                            comp.attitude*(comp.center_of_mass + ...
%                                                                 [(comp.comp.moments.(moment)_of_inertia(2,2).^(0.2))*cos(linspace(0,2*pi,100))*scaler; ...
%                                                                  zeros(1,100); ...
%                                                                  (comp.comp.moments.(moment)_of_inertia(2,2).^(0.2))*sin(linspace(0,2*pi,100))*scaler]*300);
% x_circle = comp.position +  ...
%                            comp.attitude*(comp.center_of_mass + ...
%                                                                 [zeros(1,100); ...
%                                                                  (comp.comp.moments.(moment)_of_inertia(1,1).^(0.2))*cos(linspace(0,2*pi,100))*scaler; ...
%                                                                  (comp.comp.moments.(moment)_of_inertia(1,1).^(0.2))*sin(linspace(0,2*pi,100))*scaler]*300);
% 
% 
% 
% plot3(ax, x_circle(1,:), x_circle(2,:), x_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));
% plot3(ax, y_circle(1,:), y_circle(2,:), y_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));
% plot3(ax, z_circle(1,:), z_circle(2,:), z_circle(3,:), "LineWidth",1.5, "Color",ColorMap(end-50,:));






% quiver3(ax, comp.position(1)*[1 1 1], ...
%             comp.position(2)*[1 1 1], ...
%             comp.position(3)*[1 1 1], ...
%             comp.attitude(1,:)*scaler, ...
%             comp.attitude(2,:)*scaler, ...
%             comp.attitude(3,:)*scaler, ...
%             "Color",ColorMap(end-100,:))

% quiver3(ax, comp.position(1), ...
%             comp.position(2), ...
%             comp.position(3), ...
%             comp.velocity(1)*scaler, ...
%             comp.velocity(2)*scaler, ...
%             comp.velocity(3)*scaler, ...
%             "Color",ColorMap(60,:))

%% comp.forces.(force)s:
% cellfun(@(comp.forces.(force)) quiver3(ax, ...
%                          comp.position(1) +  comp.attitude(1,:)*comp.forces.(force).pos, ...
%                          comp.position(2) +  comp.attitude(2,:)*comp.forces.(force).pos, ...
%                          comp.position(3) +  comp.attitude(3,:)*comp.forces.(force).pos, ...
%                          comp.forces.(force).vec(1)*scaler, ...
%                          comp.forces.(force).vec(2)*scaler, ...
%                          comp.forces.(force).vec(3)*scaler, ...
%                          "Color", ColorMap(end,:), ...
%                          "LineWidth",1),...
%         values(comp.comp.forces.(force)s , "cell"))


cellfun(@(force) quiver3(ax, ...
                         comp.position(1) +  comp.attitude(1,:)*comp.forces.(force).pos - comp.forces.(force).vec(1)*scaler, ...
                         comp.position(2) +  comp.attitude(2,:)*comp.forces.(force).pos - comp.forces.(force).vec(2)*scaler, ...
                         comp.position(3) +  comp.attitude(3,:)*comp.forces.(force).pos - comp.forces.(force).vec(3)*scaler, ...
                         comp.forces.(force).vec(1)*scaler, ...
                         comp.forces.(force).vec(2)*scaler, ...
                         comp.forces.(force).vec(3)*scaler, ...
                         "Color", ColorMap(200,:), ...
                         "LineWidth",1.5),...
        fieldnames(comp.forces))

cellfun(@(force) text(ax, ...
                         comp.position(1) + comp.attitude(1,:)*comp.forces.(force).pos -comp.forces.(force).vec(1)*scaler*0.2 + 0.3, ...
                         comp.position(2) + comp.attitude(2,:)*comp.forces.(force).pos -comp.forces.(force).vec(2)*scaler*0.2 + 0.3, ...
                         comp.position(3) + comp.attitude(3,:)*comp.forces.(force).pos -comp.forces.(force).vec(3)*scaler*0.2 + 0.3, ...
                         force +": "+ string(norm(comp.forces.(force).vec)/1000)+" kN", ...
                         "Color", ColorMap(200,:), ...
                         "LineWidth", 2),...
        fieldnames(comp.forces))


%% comp.moments.(moment)s:
% cellfun(@(comp.moments.(moment)) quiver3(ax, ...
%                          comp.position(1) + comp.attitude(1,:)*comp.moments.(moment).pos, ...
%                          comp.position(2) + comp.attitude(2,:)*comp.moments.(moment).pos, ...
%                          comp.position(3) + comp.attitude(3,:)*comp.moments.(moment).pos, ...
%                          comp.moments.(moment).vec(1)*scaler*300, ...
%                          comp.moments.(moment).vec(2)*scaler*300, ...
%                          comp.moments.(moment).vec(3)*scaler*300, ...
%                          "Color", ColorMap(60,:)),...
%          values(comp.comp.moments.(moment)s , "cell"))

cellfun(@(moment) quiver3(ax, ...
                         comp.position(1) + comp.attitude(1,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(1)*scaler*10, ...
                         comp.position(2) + comp.attitude(2,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(2)*scaler*10, ...
                         comp.position(3) + comp.attitude(3,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(3)*scaler*10, ...
                         comp.moments.(moment).vec(1)*scaler*10, ...
                         comp.moments.(moment).vec(2)*scaler*10, ...
                         comp.moments.(moment).vec(3)*scaler*10, ...
                         "Color", ColorMap(150,:), ...
                         "LineWidth", 2),...
         fieldnames(comp.moments))

cellfun(@(moment) text(ax, ...
                         comp.position(1) + comp.attitude(1,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(1)*scaler*4 + 0.3, ...
                         comp.position(2) + comp.attitude(2,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(2)*scaler*4 + 0.3, ...
                         comp.position(3) + comp.attitude(3,:)*comp.moments.(moment).pos - comp.moments.(moment).vec(3)*scaler*4 + 0.3, ...
                         moment +": "+ string(norm(comp.moments.(moment).vec))+" Nm", ...
                         "Color", ColorMap(150,:), ...
                         "LineStyle","--"),...
        fieldnames(comp.moments))





%% Relative wind:
xvec = linspace(-2,2,2) + comp.position(1);
yvec = linspace(-2,2,2) + comp.position(2);
zvec = linspace(-2,2,2) + comp.position(3);
[X,Y,Z] = meshgrid(xvec, yvec, zvec);

quiver3(ax, X,Y,Z, comp.relative_velocity(1)*ones(size(X)), ...
                   comp.relative_velocity(2)*ones(size(Y)), ...
                   comp.relative_velocity(3)*ones(size(Z)), "AutoScale","on","LineWidth", 0.2, "Color",ColorMap(80,:))


    end
end